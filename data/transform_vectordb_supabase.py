from supabase import create_client
from dotenv import load_dotenv
from tqdm import tqdm
import os
import pickle

# ---------------- CONFIG ----------------
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
TABLE_NAME = "embeddings"
EMB_DIR = "data/embeddings"
# ---------------------------------------


def load_vector_files():
    """L·∫•y danh s√°ch file .pkl"""
    return [f for f in os.listdir(EMB_DIR) if f.endswith(".pkl")]


def upload_embeddings(supabase):
    files = load_vector_files()
    if not files:
        print("Kh√¥ng c√≥ file embedding n√†o trong th∆∞ m·ª•c data/embeddings.")
        return

    for file in files:
        path = os.path.join(EMB_DIR, file)
        with open(path, "rb") as f:
            data = pickle.load(f)

        sheet_name = data.get("sheet_name", "unknown")
        embeddings_by_col = data.get("embeddings_by_col", {})
        rows = []

        # Duy·ªát t·ª´ng c·ªôt embedding
        for col_name, col_data in embeddings_by_col.items():
            texts = col_data.get("texts", [])
            embs = col_data.get("embeddings", [])

            if len(texts) != len(embs):
                print(f"S·ªë l∆∞·ª£ng text v√† embedding kh√¥ng kh·ªõp trong c·ªôt {col_name}")
                continue

            for text, emb in zip(texts, embs):
                # N·∫øu emb l√† numpy array, chuy·ªÉn sang list
                if hasattr(emb, "tolist"):
                    emb = emb.tolist()
                rows.append({
                    "sheet_name": sheet_name,
                    "text": text,
                    "embedding": emb,
                    "metadata": {
                        "column": col_name,
                        "data_hash": data.get("data_hash"),
                        "updated_at": data.get("updated_at"),
                    }
                })

        print(f"\nüì§ Upload {len(rows)} embeddings t·ª´ {file} ({len(embeddings_by_col)} c·ªôt)...")

        if not rows:
            print("File kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá, b·ªè qua.")
            continue

        # Upload theo batch 500 b·∫£n ghi/l·∫ßn
        batch_size = 500
        for i in tqdm(range(0, len(rows), batch_size), desc=f"{sheet_name}"):
            chunk = rows[i:i + batch_size]
            supabase.table(TABLE_NAME).insert(chunk).execute()

        print(f"Ho√†n t·∫•t upload {file} ({len(rows)} b·∫£n ghi)\n")


def main():
    print("K·∫øt n·ªëi Supabase...")
    supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
    print("K·∫øt n·ªëi th√†nh c√¥ng!\n")
    upload_embeddings(supabase)


if __name__ == "__main__":
    main()